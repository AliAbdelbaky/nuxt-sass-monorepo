import { defineNuxtModule, addTemplate, addPlugin, createResolver } from '@nuxt/kit';

export interface ApiProviderModuleOptions {
  baseURL: string;
  localeCookieName: string;
  tokenCookieName: string;
  onErrorPath?: string;
  onSuccessPath?: string;
  /** Accepts "$api_provider" or "$api" or "api"; we will inject without the "$" */
  provideName: string;
  defaultTimeoutMs?: number;
}

export default defineNuxtModule<ApiProviderModuleOptions>({
  meta: {
    name: 'nuxt-api-provider',
    configKey: 'apiProvider',
    compatibility: { nuxt: '>=4.0.0' },
  },
  defaults: {
    baseURL: '',
    localeCookieName: 'i18n_locale',
    tokenCookieName: 'auth_token',
    provideName: '$apiProvider',
    defaultTimeoutMs: 20_000,
  },
  setup(moduleOptions, nuxt) {
    const resolver = createResolver(import.meta.url);

    // Normalize provideName: strip a leading "$" if present
    const normalizedProvideName = moduleOptions.provideName?.startsWith('$')
      ? moduleOptions.provideName.slice(1)
      : moduleOptions.provideName || 'apiProvider';

    // 1) Virtual config available at: #build/api-provider-config.mjs
    addTemplate({
      filename: 'api-provider-config.mjs',
      getContents: () => {
        const cfg = {
          baseURL: moduleOptions.baseURL,
          localeCookieName: moduleOptions.localeCookieName,
          tokenCookieName: moduleOptions.tokenCookieName,
          defaultTimeoutMs: moduleOptions.defaultTimeoutMs ?? 20_000,
          provideName: normalizedProvideName,
        };
        return `export default ${JSON.stringify(cfg)}`;
      },
    });

    // 2) Handlers virtual module at: #build/api-provider-handlers.mjs
    addTemplate({
      filename: 'api-provider-handlers.mjs',
      getContents: () => {
        const imports: string[] = [];
        const fallbacks: string[] = [];

        if (moduleOptions.onErrorPath && moduleOptions.onErrorPath.trim().length > 0) {
          imports.push(`export { default as onErrorHandler } from '${moduleOptions.onErrorPath}'`);
        } else {
          fallbacks.push(`
export function onErrorHandler(status, err) {
  // default no-op (can log if you want)
  // console.error('[API ERROR]', status, err)
}
`);
        }

        if (moduleOptions.onSuccessPath && moduleOptions.onSuccessPath.trim().length > 0) {
          imports.push(
            `export { default as onSuccessHandler } from '${moduleOptions.onSuccessPath}'`
          );
        } else {
          fallbacks.push(`
export function onSuccessHandler(endpoint, data) {
  // default no-op (can log if you want)
  // console.log('[API SUCCESS]', endpoint, data)
}
`);
        }

        return `${imports.join('\n')}\n${fallbacks.join('\n')}`;
      },
    });

    // 3) Type augmentation for your chosen provideName
    addTemplate({
      filename: 'types/api-provider.d.ts',
      getContents: () => `
// Auto-generated by nuxt-api-provider
import type { IError } from '${resolver.resolve('./runtime/api-utils')}'

declare module '#app' {
  interface NuxtApp {
    $${normalizedProvideName}: <T>(
      endpoint: string,
      options?: (RequestInit & { json?: unknown; timeoutMs?: number }) | null,
      queries?: Record<string, unknown>
    ) => Promise<T | undefined>
  }
}

declare module 'vue' {
  interface ComponentCustomProperties {
    $${normalizedProvideName}: <T>(
      endpoint: string,
      options?: (RequestInit & { json?: unknown; timeoutMs?: number }) | null,
      queries?: Record<string, unknown>
    ) => Promise<T | undefined>
  }
}

export {}
`,
    });

    // 4) Register the runtime plugin (client only by your original design)
    addPlugin({
      mode: 'client',
      src: resolver.resolve('./runtime/plugin'),
    });

    // 5) Ensure the generated types are included by Nuxt
    nuxt.hook('prepare:types', ({ references }) => {
      references.push({ path: '#build/types/api-provider.d.ts' });
    });
  },
});
