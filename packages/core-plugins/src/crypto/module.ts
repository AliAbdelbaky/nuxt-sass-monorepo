// crypto/module.ts
import { defineNuxtModule, addTemplate, addPlugin, createResolver } from '@nuxt/kit';
export * from './runtime/crypto-utils';
export interface CryptoModuleOptions {
  /** Passphrase used to derive the AES key (PBKDF2). Prefer setting from env for security. */
  passphrase: string;
  /** Accepts "$crypto" or "crypto"; we inject without the "$". */
  provideName?: string;
  /** PBKDF2 iterations (default 100_000) */
  iterations?: number;
}

export default defineNuxtModule<CryptoModuleOptions>({
  meta: {
    name: 'nuxt-crypto',
    configKey: 'crypto',
    compatibility: { nuxt: '>=4.0.0' },
  },
  defaults: {
    passphrase: process.env.NUXT_PUBLIC_ENCRYPTION_PASSPHRASE || '',
    provideName: '$crypto',
    iterations: 100_000,
  },
  setup(moduleOptions, nuxt) {
    const resolver = createResolver(import.meta.url);

    // normalize provideName â†’ strip leading "$"
    const normalizedProvideName = moduleOptions.provideName?.startsWith('$')
      ? moduleOptions.provideName.slice(1)
      : moduleOptions.provideName || 'crypto';

    // 1) Virtual config available at: #build/crypto-config.mjs
    addTemplate({
      filename: 'crypto-config.mjs',
      getContents: () => {
        const cfg = {
          passphrase: moduleOptions.passphrase,
          iterations: moduleOptions.iterations ?? 100_000,
          provideName: normalizedProvideName,
        };
        return `export default ${JSON.stringify(cfg)}`;
      },
    });

    // 2) Type augmentation for your chosen provideName
    addTemplate({
      filename: 'types/crypto.d.ts',
      getContents: () => `
// Auto-generated by nuxt-crypto
import type { CryptoService } from '${resolver.resolve('./runtime/crypto-utils')}'

declare module '#app' {
  interface NuxtApp {
    $${normalizedProvideName}: CryptoService
  }
}
declare module 'vue' {
  interface ComponentCustomProperties {
    $${normalizedProvideName}: CryptoService
  }
}
export {}
`,
    });

    // 3) Register runtime plugin (needs SSR + client)
    addPlugin({
      mode: 'all',
      src: resolver.resolve('./runtime/plugin'),
    });

    // 4) Ensure the generated types are included
    nuxt.hook('prepare:types', ({ references }) => {
      references.push({ path: '#build/types/crypto.d.ts' });
    });
  },
});
